# -*- coding: utf-8 -*-
"""Python_0314.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1bPGPbTK3rY9X6f9cQDwid7bSrLuAHr41

## 파이썬 기초
- 오늘 수업

### colab 사용법
- 구글 검색 후 가입
"""

1+1

print("Hello world")

"""## ColabPro

## GPU 사용해야 할 때, 연결하기

## 파이썬 기초 문법

### 주석처리
- 여러줄 주석 처리 시,
+ 함수,클래스 작성할 때 요긴함
(Docstring)
"""

#  한 줄 처리 : 이 코드는 무슨 ~ 코드 입니다

'여러 줄 주석처리 시'
'~ '
"여러 줄 주석처리~ "
print("Hello world!")

"""### 변수의 유형 : Scala 자료형 - 4개 
-int, float, boolean, None
-더 이상 나누어지지 않는 것: 가장 작은 단위
"""

temp_int  = 1
print(temp_int)
print(type(temp_int))

"""### 문자열
- 어떤 자료형을 갖고 있는지 확실하게 확인해야 한다.
- print(type(temp_int))
"""

temp_int='1'
print(temp_int)
print(type(temp_int))

"""### float 형 예제
- 실수형
"""

num_float = 0.2
print(num_float)
print(type(num_float))

"""### bool 형
- 참 거짓
"""

temp_bool = True  # 첫 글자는 대문자 나머지는 소문자
temp_bool = False
print(type(temp_bool))

"""### None 자료형
- Null 을 나타내는 자료형
  + 데이터 분석에서 가장 처리하기 까다로운 자료형
"""

temp_none=None
print(type(temp_none))

a=7
b=2

print(a+b)
print(a-b)
print(a*b)
print(a/b)  # 나누기 : 실수형으로 결과가 나온다.
print(a//b)  # 몫
print(a**b) # 제곱
print(a%b) # 나머지

"""### 실수형 사칙연산"""

a=6.0
b=2.0

print(a+b)
print(a-b)
print(a*b)
print(a/b)  # 나누기 : 실수형으로 결과가 나온다.
print(a//b)  # 몫
print(a**b) # 제곱
print(a%b) # 나머지

"""### 논리 연산자 
- AND 조건, OR 조건이 있음
- True  : True 는 true
- false : True = false
"""

print(True and True)
print(True and False)
print(False and True)
print(False and False)

print(True or True)
print(True or False)
print(False or True)
print(False or False)

"""### 비교연산자
- 비교 연산자는 부등호를 의미함
- 왼쪽이 기준 값
"""

print(4>3)
print(3>4)
print(3>=4)
print(3<=4)

"""## Input ()
- print() 출력
-input() 입력
"""

var = input("값을 입력해주세요!!")
print(var)
print(type(var))

num1 = input("값을 입력하세요")
num2 = input("값을 입력하세요")

result = int(num1)+int(num2)
print(result)



"""## String
- 매우 중요함
- 
"""

str1 ="Hello "
str2="World"
print(str1+str2)

str1 ="55"
str2="1000"
print(str1+str2)

str1 ="Hello "
str2="World"
result = str1+str2
print(result)

str1 ="Hello "
str2="World"
result = str1+str2
print(int(str1)+int(str2))

"""### *"""

greeting = "Hello World"
print(greeting*3)

"""### Indexing
- 중요
- 0번째부터 시작
"""

greeting ="Hello World"
print(greeting[-1])  # []안에 숫자 입력해서 확인하기

"""### 슬라이싱
- 자름 : 글자 단위별로 자름
"""

greeting = "Hello World!"
print(greeting[0:5:4])
print(greeting[:])
print(greeting[6:])
print(greeting[3:9]) # 마지막 인덱스는 포함이 안 됨
print(greeting[5:-1])
print(greeting[0:9:2])

greeting = "Hello World!"
greeting[13]

"""### 문자열의 함수들
- 공식문서 참조
"""

greeting = 'Hello World!'
print(greeting)

'Hello World!'

"Python is fun"

'''Life is too short'''

food = "Python's favorate food is Perl"

food

food = 'Python's favorate food is Perl'

say = '"Python is very easy" he says.'

say

'"Python is very easy" he says.'

food = 'Python\'s favorate is Perl' # 소유격을 의미하는 ['s] 를 붙이고 싶을 때, \를 '앞에 붙인다.

food

say = "\"Python is very easy.\" he says." # "쌍따옴표를 넣고 싶을 때, 쌍따옴표 앞에 \를 붙이면 출력된다."

say

multiline = "Life is too short\nYou need Python"

multiline

multiline = '''
Life is too short
You need a Python
'''

multiline="""
Life is too short
You need a Python
"""

print(multiline)

line = 'Life\tis\ttoo\tshort'

print(line)

retn = "Life is too short\r"

print(retn)

say = "\"Life is too short\""

print(say)

say = '\'Life is too short\''

print(say)

head = "Python "
tail = "is fun"
head + tail

a = "Python"
a*2

print("="*50)
print("My program")
print("="*50)

a="Life is too short"
a[3]

"""### 인덱싱과 슬라이싱
- 인덱싱(Indexing)이란 무엇인가를 "가리킨다"는 의미이고, 슬라이싱(Slicing)은 무엇인가를 "잘라낸다"는 의미이다. 이런 의미를 생각하면서 다음 내용을 살펴보자.
"""

a="Life is too short, You need a Python"
len(a)

a[-1]

a[-0]

a[-2]

a="Life is too short, You need a Python"
b=a[0]+a[1]+a[2]+a[3]
b

a[0:5]

a[19:]

a[:17]

a[19:-7]

"""- 위 소스 코드에서 a[19:-7]이 뜻하는 것은 a[19]에서부터 a[-8]까지를 말한다. 이 역시 a[-7]은 포함하지 않는다.

### 슬라이싱으로 문자열 나누기
- 다음은 자주 사용하게 되는 슬라이싱 기법 중 하나이다.
"""

a="20010331Rainy"
date=a[:8] # 0부터 시작해서 7인 날짜까지 출력
weather=a[8:]
date

weather

a="20010331Rainy"
year=a[:4]
day=a[4:8]
weather=a[8:]
year

day

weather

a="pithon"
a[1] 
'i'
a[1]='y'

a="pithon"
a[:1]
a[2:]
a[:1]+'y'+a[2:]

"""### 문자열 포매팅
- 1. 숫자 바로 대입
"""

"I eat a %s apples" %"five"

"""- 2. 문자열 바로 대입"""

"I eat a %d apples" %3

"""- 3. 숫자 값을 나타내는 변수로 대입"""

number = 3
"I eat a %d apples" %number

"""- 4. 2개 이상의 값 넣기"""

number = 3
day ="three"
"I ate a %d apples. so I was sick for %s days." % (number, day)

"""- 여기에서 재미있는 것은 %s 포맷 코드인데, 이 코드는 어떤 형태의 값이든 변환해 넣을 수 있다. 무슨 말인지 예를 통해 확인해 보자."""

"I have %s apples" %3

"Rate is %s" % 3.242

"""- [포매팅 연산자 %d와 %를 같이 쓸 때는 %%를 쓴다]"""

"Error is %d%" % 98

"Erorr is %d%%" %98

"""### 포맷 코드와 숫자 함께 사용하기
- 위에서 보았듯이 %d, %s 등의 포맷 코드는 문자열 안에 어떤 값을 삽입하기 위해 사용한다. 하지만 포맷 코드를 숫자와 함께 사용하면 더 유용하게 사용할 수 있다. 다음 예를 보고 따라해 보자.
- 1. 정렬과 공백
"""

"%10s" % "hi"

"""- 앞의 예문에서 %10s는 전체 길이가 10개인 문자열 공간에서 대입되는 값을 오른쪽으로 정렬하고 그 앞의 나머지는 공백으로 남겨 두라는 의미이다.

그렇다면 반대쪽인 왼쪽 정렬은 %-10s가 될 것이다. 확인해 보자.
"""

"%-10sjane." % "hi"

"""- 2. 소수점 표현하기"""

"%0.4f" % 3.241253

"%10.4f" % 3.241351

"""- 위 예는 숫자 3.42134234를 소수점 네 번째 자리까지만 표시하고 전체 길이가 10개인 문자열 공간에서 오른쪽으로 정렬하는 예를 보여 준다.

### format 함수를 사용한 포매팅
- 문자열의 format 함수를 사용하면 좀 더 발전된 스타일로 문자열 포맷을 지정할 수 있다. 앞에서 살펴본 문자열 포매팅 예제를 format 함수를 사용해서 바꾸면 다음과 같다.

- 숫자 바로 대입하기
"""

"I eat a {0} apples." .format(3)

"I eat a {0} apples" .format("five")

"""- 숫자 값을 가진 변수로 대입하기"""

number = 3
"I eat a {} apples".format(number)

"""- 2개 이상의 값 넣기"""

number = 3
day = "three"
"I ate a {0} apples. I sick for a {0} days" .format(number, day)

"""- **이름으로 넣기**"""

"I ate a {number} apples. I sick for a {day} days".format(number=3, day=5)

"""- 위 예에서 볼 수 있듯이 {0}, {1}과 같은 인덱스 항목 대신 더 편리한 {name} 형태를 사용하는 방법도 있다. {name} 형태를 사용할 경우 format 함수에는 반드시 name=value 와 같은 형태의 입력값이 있어야만 한다. 위 예는 문자열의 {number}, {day}가 format 함수의 입력값인 number=10, day=3 값으로 각각 바뀌는 것을 보여 주고 있다.

- **인덱스와 이름을 혼용해서 넣기**
"""

"I ate a {0} apples. I sick for a {day} days" .format(3, day=5)

"""- 위와 같이 인덱스 항목과 name=value 형태를 혼용하는 것도 가능하다.

- **왼쪽 정렬** 
"""

"{0:<10}".format("hi")

"""- :<10 표현식을 사용하면 치환되는 문자열을 왼쪽으로 정렬하고 문자열의 총 자릿수를 10으로 맞출 수 있다.

- **오른쪽 정렬**
"""

"{0:>10}".format("hi")

"""- **가운데 정렬**"""

"{0:^10}".format("hi")

"""- 공백 채우기"""

"{0:=^10}".format("hi")

"{0:!<10}".format("hi")

"{0:!<12}".format("hello")

"{0:^12}".format("world")

y=3.42135
"{0:0.4f}".format(y)



"""- 소수점 표현하기"""



"""- { 또는 } 문자 표현하기"""



"""### f 문자열 포매팅
- 파이썬 3.6 버전부터는 f 문자열 포매팅 기능을 사용할 수 있다. 파이썬 3.6 미만 버전에서는 사용할 수 없는 기능이므로 주의해야 한다.

- 다음과 같이 문자열 앞에 f 접두사를 붙이면 f 문자열 포매팅 기능을 사용할 수 있다.
"""

name = "홍길동"
age = "30"
f"나의 이름은 {name}입니다. 나이는 {age}세 입니다."

"""- 표현식이란 문자열 안에서 변수와 +, -와 같은 수식을 함께 사용하는 것을 말한다."""

age = 30
f"나는 내년에 {age+1}세가 된다."

"""- 딕셔너리는 f 문자열 포매팅에서 다음과 같이 사용할 수 있다.
.

> 딕셔너리는 Key와 Value라는 것을 한 쌍으로 갖는 자료형이다. 02-5에서 자세히 알아본다


"""

f'{"hi":<10}'

f'{"Hello":>10}'



"""### 문자개수 세기 (count)

"""

a="hobby"
a.count('b')

a="hobby"
a.count('5')

a="Hello"
a.count('4')



"""### 위치 알려주기1(find)"""

a="Python is the best choice"
a.find('b')

a="Hello, \"have a nice day!"
a.find('h')

a="Hello, friday after noon tea promise."
a.count('p')

"""- **위치 알려주기1(find)**"""

a="Python is the best choice"
a.find('b')



"""- **위치 알려주기2(index)**"""

a="Life is too short, Live a everyday be happy!"
a.index('s')

"""## 0315 Python 수업
 ### 변수와 클래스
  - 변수명 저장과 동시에 클래스로 전환


"""

tmp_string = 'Java'

# 변수명 저장!
# 변수명 저장함과 동시에, 클래스로 전환된 것을 의미한다.
tmp_string.upper()

"""### 하기 코드가 오류난 이유 : str 클래스 내부에서 정의된 함수명만 사용할 수 있다.
 - Upper : x
"""

tmp_string = 'Java'
tmp_string.Upper()

"""### 하기 코드가 오류난 이유 : int는 "upper"이 정의되지 않았기 때문이다.
- int : upper (사용 불가)
"""

tmp_string = '1'
tmp_string.upper()

tmp_string = 'Java'

# 변수명 저장!
# 변수명 저장함과 동시에, 클래스로 전환된 것을 의미한다.
print(tmp_string.upper())
print(tmp_string.lower())

tmp_string = "BMW-BENTZ-TESLA-AUDI"

# sep = '-' 에서 'sep = ' 이 생략됨 - 공식문서 확인
print(tmp_string.split('-'))

"""- 참조 : https://docs.python.org/3/library/stdtypes.html?highlight=split#str.split

### 리스트 !! ** 중요함
- 자바의 배열 :
"""

a=[]
a_func=list() # list()
b=[1]
c=['Apple']
d=[1,2,['apple']]

print(a)
print(a_func)
print(b)
print(c)
print(d)

a=[5,3,1,4,6,7]
print(a)

a[0:3]

a[3:]

a[2:5]

a[-1]

"""## 중첩 리스트(Nested list)
- 리스트 내의 또 다른 리스트
"""

a=[['apple', 'banana', 'pineappe','mango', 'cherry']]

temp = a[0]
temp2= temp[4]
temp2[2]

# list 삼중구조
print(a[0][4][2])

"""- List 길이 구하기"""

a=[1,2,3]
len(a)

a=[1,2,3[a,b,c]]
print(a[0][1][0])

a=[1,2,4]
a[2]=3
a

a=[1,2,3,4]
a.pop()

a=[1,2,3,4]
a.reverse()
a

"""### 리스트 연결 연산자
- 덧셈, 곱셈

"""

a=['alice','bob','cat']
b=['apple','banana','cherry']

c=a+b
print(c)

a=[4,1,2,3]
a.sort()
a

a=['a','b','c']
b=a*6
print(b)

a=[1,3,4,6,7]
a.index(3)
a

c=a*0
print(c)

"""### 리스트값 수정
- list 참조 : https://docs.python.org/3/tutorial/datastructures.html
"""

a=[1,1,1]
a[1]="b"
print(a)

a=[1,3,6]
a[1] ="h"
print(a)

a=[1,2,4,5]
a.append(6)
print(a)

a=[1,3,7,8]
a.append(9)
print(a)

"""### 리스트 값 추가하기
- append 메서드 사용 ()
- 반복문 사용 시, 매우 자주 활용 됨
"""

a=[100,200,300]
a.append(400)
a.append(500)

b=[600,700]
a.append(b) # 중첩 리스트
print(a)

"""### 확장 리스트
- extend
"""

a=[100,200,300]
b=[400,500,600]

a.extend(b)
print(a)

a=[1,2,3]
del a[2]
print(a)

"""### insert
- 특정한 위치에 값을 추가하기
"""

a=[1,1,1]
a.insert(2,4)
print(a)

a=[1,1,3]
del a[1]
print(a)

"""### 리스트의 값을 삭제
- remove() 함수
"""

a=[1,23,3]
a.extend([4,5])
print(a)

a=[5,4,3,2,1]
a.remove(4) # value 값이다.
print(a)

a=[1,2,3,4]
a.pop(2) # value 값이다.
print(a)

a=[1,3,5,6]
a2=a.pop(3) # 리스트에서 꺼내기

print(a2)
print(a)

"""## 그 외 유용한 메서드
- clear 함수 - 리스트 삭제
"""

a=[0,1,2,3]
print(a)

a.clear()
print(a)

a=[1,4,5,2,3]
a.sort()
a.reverse() # 내림차순 정렬
print(a)



"""## 튜플
- 튜플(tuple)은 몇 가지 점을 제외하곤 리스트와 거의 비슷하며 리스트와 다른 점은 다음과 같다.

- 리스트는 [ ]으로 둘러싸지만 튜플은 ( )으로 둘러싼다.
- 리스트는 요소 값의 생성, 삭제, 수정이 가능하지만 튜플은 요소 값을 바꿀 수 없다.
튜플의 모습은 다음과 같다.
"""

tuple01 = (0)
tuple02 = (0,1)
tuple03 = 2,3
tuple04 = ('a','b')

print(tuple01)
print(tuple02)
print(tuple03)
print(tuple04)

print(type(tuple02))
print(type(tuple03))

# packing
my_tuple = 3,2, "A"
print(my_tuple)

# unpacking : tuple만 가능하다
a,b,c = my_tuple

print(a)
print(b)
print(c)

"""### tuple는 수정/삭제 안 됨"""

a=[0,1,2,3,4,5,"a"]
del a[6]
a

a=(0,1,2,3,4,5,"a")
print(a[6])
del a[6]
a

"""- tuple는 수정 불가능 :list는 수정 가능"""

a=[1,1,1,'a']
a[3] =1
a

a=(1,1,1,'a') 
a[3] =1
a

a=(1,2,3,4)
del a([2])
a

a=[1,2,3,4]
del a([3])
a

"""### 슬라이싱, 인덱싱
- 각자실습
"""

### 더하기 및 곱하기 연산자 사용

t1 =(0,1,2,3,4)
t2 =('a','b','c')

print(t1+t2)
print(t1*3)
print(t1*0)

t1=(1,2)
t2=(3,4)

print(t1*3)

"""## 딕셔너리
- json과 유사한 형태
"""

temp_dict = {
    "a" : [0,1,2,3],
    "b" : "휴먼", 
    "c" : 100
}

temp_dict

temp_dict['a'] # a ~ c 까지 변경가능

temp_dict['d']

del temp_dict['a']
a

temp_dict.keys()

print(type(temp_dict.keys()))
# 리스트로 변환
result=temp_dict.keys()
result.appennd("d")

print(result)

result=list(temp_dict.keys()) # list로 형 변환
print(result)
print(type(result))

# value 값 추가하기
result = temp_dict.values()
print(type(result))
print(result)

a={'name':'후먼','age':50,'job':'학생'} # 데이터 전처리에 수집가공에 대부분의 시간 소요
result=list(a.items())
print(result)
print(result[1][0]) #

a={'name': '나라', 'age':'22','job':'수강생'}
result=list(a.items())
print(result)
print(result[2][0])



"""#### if 조건문"""

a=4  
if a>5: # if
    print("a가 5보다 크다") # 들여쓰기
elif a>10:  # elif
    print("a가 10보다 크다")
else: # else
    print("나도 모름")

# input 함수
# 90점 이상 A 등급
# 80점 이상 B 등급

a=90
var1 = int(input("입력하세요"))
if a>90:
    
    print("A등급")
elif a>80:    
    print("B등급")
else:    
    print("-등급")

"""### 들여쓰기
- if 조건문:
    수행할 문장1
    수행할 문장2

## 반복문
- 반복해서 문장을 수행해야 할 경우 while문을 사용한다. 그래서 while문을 반복문이라고도 부른다.
"""

# Hello World 10 개를 출력
temp_pr = 0
while temp_pr  < 10:
      temp_pr = temp_pr + 1
      print("출력 temp_pr회 진행" % temp_pr)
      if temp_pr == 10:
        print("출력 완료")

# 과제 hello world
for i in range(5):
    print("hello world")

letters = ['A','B','c']
for idx, value in enumerate(letters): #index / value 형태
    print(idx, value)

"""### 중요! - Pythonic 문법 : 리스트 컴프리헨션(list comprehension)"""

fruits = ['apple', 'kiwi', 'mango']

# 리스트의 값 : 그중에서 a가 들어간 글자만 따로 출력
# 리스트 컴프리헨션(list comprehension)
newlists = [fruit for fruit in fruits if "a" in fruit ]
print(newlists)

fruit = "apple"
"a" in fruit

fruits =['apple','mango']
"a" in fruits[1]

fruits = ['apple', 'kiwi', 'mango']

newlist = []
for fruit in fruits:
  #1단계
  print(fruit)
  
  # 2단계 : 조건문을 작성할 수 있따.
  # True/ False 식을 도출
  if "a" in fruit:
    newlist.append(fruit)

print(newlist)

fruits={'apple','mango','pineapple'}
newlist={fruit for fruit in fruits if 'a' in fruit}
print(newlist)

def test(x):
  x=str(x) +'ab'
  return x
[test(i) for i in range(5)]

[i for i in range(5) if i%2==0 if i%4==0]

[i for i in range(9) if i%2==0 if i%4==0]

"""- 왼쪽에 if 문 사용하고 else 문 사용"""

[i if i%2==0 else 'odd' for i in range(8)]

"""- for 문 2개"""

[(i,j) for i in range(3) for j in range(2)]

"""- if ~ else 문을 다중 사용"""

[i if i%2==0 else 'odd-1' if i==1 else 'odd-3' for i in range(9)]